/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/wp/v2/posts": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Limit response to posts published after a given ISO8601 compliant date. */
          after?: string;
          /** Limit response to posts modified after a given ISO8601 compliant date. */
          modified_after?: string;
          /** Limit result set to posts assigned to specific authors. */
          author?: number[];
          /** Ensure result set excludes posts assigned to specific authors. */
          author_exclude?: number[];
          /** Limit response to posts published before a given ISO8601 compliant date. */
          before?: string;
          /** Limit response to posts modified before a given ISO8601 compliant date. */
          modified_before?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by post attribute. */
          orderby?: (
            | "author"
            | "date"
            | "id"
            | "include"
            | "modified"
            | "parent"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
          )[];
          /** Array of column names to be searched. */
          search_columns?: string[];
          /** Limit result set to posts with one or more specific slugs. */
          slug?: string[];
          /** Limit result set to posts assigned one or more statuses. */
          status?: string[];
          /** Limit result set based on relationship between multiple taxonomies. */
          tax_relation?: ("AND" | "OR")[];
          /** Limit result set to items with specific terms assigned in the categories taxonomy. */
          categories?: string;
          /** Limit result set to items except those with specific terms assigned in the categories taxonomy. */
          categories_exclude?: string;
          /** Limit result set to items with specific terms assigned in the tags taxonomy. */
          tags?: string;
          /** Limit result set to items except those with specific terms assigned in the tags taxonomy. */
          tags_exclude?: string;
          /** Limit result set to items that are sticky. */
          sticky?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** The excerpt for the post. */
          excerpt?: string;
          /** The ID of the featured media for the post. */
          featured_media?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** The format for the post. */
          format?: (
            | "standard"
            | "aside"
            | "chat"
            | "gallery"
            | "link"
            | "image"
            | "quote"
            | "status"
            | "video"
            | "audio"
          )[];
          /** Meta fields. */
          meta?: string;
          /** Whether or not the post should be treated as sticky. */
          sticky?: boolean;
          /** The theme file to use to display the post. */
          template?: string;
          /** The terms assigned to the post in the category taxonomy. */
          categories?: number[];
          /** The terms assigned to the post in the post_tag taxonomy. */
          tags?: number[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/posts/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** The password for the post if it is password protected. */
          password?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** The excerpt for the post. */
          excerpt?: string;
          /** The ID of the featured media for the post. */
          featured_media?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** The format for the post. */
          format?: (
            | "standard"
            | "aside"
            | "chat"
            | "gallery"
            | "link"
            | "image"
            | "quote"
            | "status"
            | "video"
            | "audio"
          )[];
          /** Meta fields. */
          meta?: string;
          /** Whether or not the post should be treated as sticky. */
          sticky?: boolean;
          /** The theme file to use to display the post. */
          template?: string;
          /** The terms assigned to the post in the category taxonomy. */
          categories?: number[];
          /** The terms assigned to the post in the post_tag taxonomy. */
          tags?: number[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        formData: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** The excerpt for the post. */
          excerpt?: string;
          /** The ID of the featured media for the post. */
          featured_media?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** The format for the post. */
          format?: (
            | "standard"
            | "aside"
            | "chat"
            | "gallery"
            | "link"
            | "image"
            | "quote"
            | "status"
            | "video"
            | "audio"
          )[];
          /** Meta fields. */
          meta?: string;
          /** Whether or not the post should be treated as sticky. */
          sticky?: boolean;
          /** The theme file to use to display the post. */
          template?: string;
          /** The terms assigned to the post in the category taxonomy. */
          categories?: number[];
          /** The terms assigned to the post in the post_tag taxonomy. */
          tags?: number[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Whether to bypass Trash and force deletion. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** The excerpt for the post. */
          excerpt?: string;
          /** The ID of the featured media for the post. */
          featured_media?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** The format for the post. */
          format?: (
            | "standard"
            | "aside"
            | "chat"
            | "gallery"
            | "link"
            | "image"
            | "quote"
            | "status"
            | "video"
            | "audio"
          )[];
          /** Meta fields. */
          meta?: string;
          /** Whether or not the post should be treated as sticky. */
          sticky?: boolean;
          /** The theme file to use to display the post. */
          template?: string;
          /** The terms assigned to the post in the category taxonomy. */
          categories?: number[];
          /** The terms assigned to the post in the post_tag taxonomy. */
          tags?: number[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/posts/{parent}/revisions": {
    get: {
      parameters: {
        path: {
          /** The ID for the parent of the revision. */
          parent: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by object attribute. */
          orderby?: (
            | "date"
            | "id"
            | "include"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
          )[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/posts/{parent}": {
    get: {
      parameters: {
        path: {
          /** The ID for the parent of the autosave. */
          parent: number;
        };
        query: {
          /** The ID for the autosave. */
          id?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/posts/{id}/autosaves": {
    get: {
      parameters: {
        query: {
          /** The ID for the parent of the autosave. */
          parent?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The ID for the parent of the autosave. */
          parent?: number;
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** The excerpt for the post. */
          excerpt?: string;
          /** The ID of the featured media for the post. */
          featured_media?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** The format for the post. */
          format?: (
            | "standard"
            | "aside"
            | "chat"
            | "gallery"
            | "link"
            | "image"
            | "quote"
            | "status"
            | "video"
            | "audio"
          )[];
          /** Meta fields. */
          meta?: string;
          /** Whether or not the post should be treated as sticky. */
          sticky?: boolean;
          /** The theme file to use to display the post. */
          template?: string;
          /** The terms assigned to the post in the category taxonomy. */
          categories?: number[];
          /** The terms assigned to the post in the post_tag taxonomy. */
          tags?: number[];
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/pages": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Limit response to posts published after a given ISO8601 compliant date. */
          after?: string;
          /** Limit response to posts modified after a given ISO8601 compliant date. */
          modified_after?: string;
          /** Limit result set to posts assigned to specific authors. */
          author?: number[];
          /** Ensure result set excludes posts assigned to specific authors. */
          author_exclude?: number[];
          /** Limit response to posts published before a given ISO8601 compliant date. */
          before?: string;
          /** Limit response to posts modified before a given ISO8601 compliant date. */
          modified_before?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Limit result set to posts with a specific menu_order value. */
          menu_order?: number;
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by post attribute. */
          orderby?: (
            | "author"
            | "date"
            | "id"
            | "include"
            | "modified"
            | "parent"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
            | "menu_order"
          )[];
          /** Limit result set to items with particular parent IDs. */
          parent?: number[];
          /** Limit result set to all items except those of a particular parent ID. */
          parent_exclude?: number[];
          /** Array of column names to be searched. */
          search_columns?: string[];
          /** Limit result set to posts with one or more specific slugs. */
          slug?: string[];
          /** Limit result set to posts assigned one or more statuses. */
          status?: string[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The ID for the parent of the post. */
          parent?: number;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** The excerpt for the post. */
          excerpt?: string;
          /** The ID of the featured media for the post. */
          featured_media?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** The order of the post in relation to other posts. */
          menu_order?: number;
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/pages/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** The password for the post if it is password protected. */
          password?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The ID for the parent of the post. */
          parent?: number;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** The excerpt for the post. */
          excerpt?: string;
          /** The ID of the featured media for the post. */
          featured_media?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** The order of the post in relation to other posts. */
          menu_order?: number;
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        formData: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The ID for the parent of the post. */
          parent?: number;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** The excerpt for the post. */
          excerpt?: string;
          /** The ID of the featured media for the post. */
          featured_media?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** The order of the post in relation to other posts. */
          menu_order?: number;
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Whether to bypass Trash and force deletion. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The ID for the parent of the post. */
          parent?: number;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** The excerpt for the post. */
          excerpt?: string;
          /** The ID of the featured media for the post. */
          featured_media?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** The order of the post in relation to other posts. */
          menu_order?: number;
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/pages/{parent}/revisions": {
    get: {
      parameters: {
        path: {
          /** The ID for the parent of the revision. */
          parent: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by object attribute. */
          orderby?: (
            | "date"
            | "id"
            | "include"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
          )[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/pages/{parent}": {
    get: {
      parameters: {
        path: {
          /** The ID for the parent of the autosave. */
          parent: number;
        };
        query: {
          /** The ID for the autosave. */
          id?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/pages/{id}/autosaves": {
    get: {
      parameters: {
        query: {
          /** The ID for the parent of the autosave. */
          parent?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The ID for the parent of the post. */
          parent?: number;
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** The excerpt for the post. */
          excerpt?: string;
          /** The ID of the featured media for the post. */
          featured_media?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** The order of the post in relation to other posts. */
          menu_order?: number;
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/media": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Limit response to posts published after a given ISO8601 compliant date. */
          after?: string;
          /** Limit response to posts modified after a given ISO8601 compliant date. */
          modified_after?: string;
          /** Limit result set to posts assigned to specific authors. */
          author?: number[];
          /** Ensure result set excludes posts assigned to specific authors. */
          author_exclude?: number[];
          /** Limit response to posts published before a given ISO8601 compliant date. */
          before?: string;
          /** Limit response to posts modified before a given ISO8601 compliant date. */
          modified_before?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by post attribute. */
          orderby?: (
            | "author"
            | "date"
            | "id"
            | "include"
            | "modified"
            | "parent"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
          )[];
          /** Limit result set to items with particular parent IDs. */
          parent?: number[];
          /** Limit result set to all items except those of a particular parent ID. */
          parent_exclude?: number[];
          /** Array of column names to be searched. */
          search_columns?: string[];
          /** Limit result set to posts with one or more specific slugs. */
          slug?: string[];
          /** Limit result set to posts assigned one or more statuses. */
          status?: string[];
          /** Limit result set to attachments of a particular media type. */
          media_type?: ("image" | "video" | "text" | "application" | "audio")[];
          /** Limit result set to attachments of a particular MIME type. */
          mime_type?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The title for the post. */
          title?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
          /** Alternative text to display when attachment is not displayed. */
          alt_text?: string;
          /** The attachment caption. */
          caption?: string;
          /** The attachment description. */
          description?: string;
          /** The ID for the associated post of the attachment. */
          post?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/media/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The title for the post. */
          title?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
          /** Alternative text to display when attachment is not displayed. */
          alt_text?: string;
          /** The attachment caption. */
          caption?: string;
          /** The attachment description. */
          description?: string;
          /** The ID for the associated post of the attachment. */
          post?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        formData: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The title for the post. */
          title?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
          /** Alternative text to display when attachment is not displayed. */
          alt_text?: string;
          /** The attachment caption. */
          caption?: string;
          /** The attachment description. */
          description?: string;
          /** The ID for the associated post of the attachment. */
          post?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Whether to bypass Trash and force deletion. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The title for the post. */
          title?: string;
          /** The ID for the author of the post. */
          author?: number;
          /** Whether or not comments are open on the post. */
          comment_status?: ("open" | "closed")[];
          /** Whether or not the post can be pinged. */
          ping_status?: ("open" | "closed")[];
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
          /** Alternative text to display when attachment is not displayed. */
          alt_text?: string;
          /** The attachment caption. */
          caption?: string;
          /** The attachment description. */
          description?: string;
          /** The ID for the associated post of the attachment. */
          post?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/media/{id}/post-process": {
    post: {
      parameters: {
        path: {
          /** Unique identifier for the attachment. */
          id: number;
        };
        formData: {
          action: "create-image-subsizes"[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/media/{id}/edit": {
    post: {
      parameters: {
        formData: {
          /** URL to the edited image file. */
          src: string;
          /** Array of image edits. */
          modifiers?: { [key: string]: unknown }[];
          /** The amount to rotate the image clockwise in degrees. DEPRECATED: Use `modifiers` instead. */
          rotation?: number;
          /** As a percentage of the image, the x position to start the crop from. DEPRECATED: Use `modifiers` instead. */
          x?: number;
          /** As a percentage of the image, the y position to start the crop from. DEPRECATED: Use `modifiers` instead. */
          y?: number;
          /** As a percentage of the image, the width to crop the image to. DEPRECATED: Use `modifiers` instead. */
          width?: number;
          /** As a percentage of the image, the height to crop the image to. DEPRECATED: Use `modifiers` instead. */
          height?: number;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/menu-items": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Limit response to posts published after a given ISO8601 compliant date. */
          after?: string;
          /** Limit response to posts modified after a given ISO8601 compliant date. */
          modified_after?: string;
          /** Limit response to posts published before a given ISO8601 compliant date. */
          before?: string;
          /** Limit response to posts modified before a given ISO8601 compliant date. */
          modified_before?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by object attribute. */
          orderby?: (
            | "author"
            | "date"
            | "id"
            | "include"
            | "modified"
            | "parent"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
            | "menu_order"
          )[];
          /** Array of column names to be searched. */
          search_columns?: string[];
          /** Limit result set to posts with one or more specific slugs. */
          slug?: string[];
          /** Limit result set to posts assigned one or more statuses. */
          status?: string[];
          /** Limit result set based on relationship between multiple taxonomies. */
          tax_relation?: ("AND" | "OR")[];
          /** Limit result set to items with specific terms assigned in the menus taxonomy. */
          menus?: string;
          /** Limit result set to items except those with specific terms assigned in the menus taxonomy. */
          menus_exclude?: string;
          /** Limit result set to posts with a specific menu_order value. */
          menu_order?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The title for the object. */
          title?: string;
          /** The family of objects originally represented, such as "post_type" or "taxonomy". */
          type?: ("taxonomy" | "post_type" | "post_type_archive" | "custom")[];
          /** A named status for the object. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the parent of the object. */
          parent?: number;
          /** Text for the title attribute of the link element for this menu item. */
          attr_title?: string;
          /** Class names for the link element of this menu item. */
          classes?: string[];
          /** The description of this menu item. */
          description?: string;
          /** The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0. */
          menu_order?: number;
          /** The type of object originally represented, such as "category", "post", or "attachment". */
          object?: string;
          /** The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories. */
          object_id?: number;
          /** The target attribute of the link element for this menu item. */
          target?: ("_blank" | "")[];
          /** The URL to which this menu item points. */
          url?: string;
          /** The XFN relationship expressed in the link of this menu item. */
          xfn?: string[];
          /** The terms assigned to the object in the nav_menu taxonomy. */
          menus?: number;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/menu-items/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The title for the object. */
          title?: string;
          /** The family of objects originally represented, such as "post_type" or "taxonomy". */
          type?: ("taxonomy" | "post_type" | "post_type_archive" | "custom")[];
          /** A named status for the object. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the parent of the object. */
          parent?: number;
          /** Text for the title attribute of the link element for this menu item. */
          attr_title?: string;
          /** Class names for the link element of this menu item. */
          classes?: string[];
          /** The description of this menu item. */
          description?: string;
          /** The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0. */
          menu_order?: number;
          /** The type of object originally represented, such as "category", "post", or "attachment". */
          object?: string;
          /** The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories. */
          object_id?: number;
          /** The target attribute of the link element for this menu item. */
          target?: ("_blank" | "")[];
          /** The URL to which this menu item points. */
          url?: string;
          /** The XFN relationship expressed in the link of this menu item. */
          xfn?: string[];
          /** The terms assigned to the object in the nav_menu taxonomy. */
          menus?: number;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        formData: {
          /** The title for the object. */
          title?: string;
          /** The family of objects originally represented, such as "post_type" or "taxonomy". */
          type?: ("taxonomy" | "post_type" | "post_type_archive" | "custom")[];
          /** A named status for the object. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the parent of the object. */
          parent?: number;
          /** Text for the title attribute of the link element for this menu item. */
          attr_title?: string;
          /** Class names for the link element of this menu item. */
          classes?: string[];
          /** The description of this menu item. */
          description?: string;
          /** The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0. */
          menu_order?: number;
          /** The type of object originally represented, such as "category", "post", or "attachment". */
          object?: string;
          /** The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories. */
          object_id?: number;
          /** The target attribute of the link element for this menu item. */
          target?: ("_blank" | "")[];
          /** The URL to which this menu item points. */
          url?: string;
          /** The XFN relationship expressed in the link of this menu item. */
          xfn?: string[];
          /** The terms assigned to the object in the nav_menu taxonomy. */
          menus?: number;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Whether to bypass Trash and force deletion. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The title for the object. */
          title?: string;
          /** The family of objects originally represented, such as "post_type" or "taxonomy". */
          type?: ("taxonomy" | "post_type" | "post_type_archive" | "custom")[];
          /** A named status for the object. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the parent of the object. */
          parent?: number;
          /** Text for the title attribute of the link element for this menu item. */
          attr_title?: string;
          /** Class names for the link element of this menu item. */
          classes?: string[];
          /** The description of this menu item. */
          description?: string;
          /** The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0. */
          menu_order?: number;
          /** The type of object originally represented, such as "category", "post", or "attachment". */
          object?: string;
          /** The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories. */
          object_id?: number;
          /** The target attribute of the link element for this menu item. */
          target?: ("_blank" | "")[];
          /** The URL to which this menu item points. */
          url?: string;
          /** The XFN relationship expressed in the link of this menu item. */
          xfn?: string[];
          /** The terms assigned to the object in the nav_menu taxonomy. */
          menus?: number;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/menu-items/{id}/autosaves": {
    get: {
      parameters: {
        query: {
          /** The ID for the parent of the autosave. */
          parent?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The ID for the parent of the object. */
          parent?: number;
          /** The title for the object. */
          title?: string;
          /** The family of objects originally represented, such as "post_type" or "taxonomy". */
          type?: ("taxonomy" | "post_type" | "post_type_archive" | "custom")[];
          /** A named status for the object. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** Text for the title attribute of the link element for this menu item. */
          attr_title?: string;
          /** Class names for the link element of this menu item. */
          classes?: string[];
          /** The description of this menu item. */
          description?: string;
          /** The DB ID of the nav_menu_item that is this item's menu parent, if any, otherwise 0. */
          menu_order?: number;
          /** The type of object originally represented, such as "category", "post", or "attachment". */
          object?: string;
          /** The database ID of the original object this menu item represents, for example the ID for posts or the term_id for categories. */
          object_id?: number;
          /** The target attribute of the link element for this menu item. */
          target?: ("_blank" | "")[];
          /** The URL to which this menu item points. */
          url?: string;
          /** The XFN relationship expressed in the link of this menu item. */
          xfn?: string[];
          /** The terms assigned to the object in the nav_menu taxonomy. */
          menus?: number;
          /** Meta fields. */
          meta?: string;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/menu-items/{parent}": {
    get: {
      parameters: {
        path: {
          /** The ID for the parent of the autosave. */
          parent: number;
        };
        query: {
          /** The ID for the autosave. */
          id?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/blocks": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Limit response to posts published after a given ISO8601 compliant date. */
          after?: string;
          /** Limit response to posts modified after a given ISO8601 compliant date. */
          modified_after?: string;
          /** Limit response to posts published before a given ISO8601 compliant date. */
          before?: string;
          /** Limit response to posts modified before a given ISO8601 compliant date. */
          modified_before?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by post attribute. */
          orderby?: (
            | "author"
            | "date"
            | "id"
            | "include"
            | "modified"
            | "parent"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
          )[];
          /** Array of column names to be searched. */
          search_columns?: string[];
          /** Limit result set to posts with one or more specific slugs. */
          slug?: string[];
          /** Limit result set to posts assigned one or more statuses. */
          status?: string[];
          /** Limit result set based on relationship between multiple taxonomies. */
          tax_relation?: ("AND" | "OR")[];
          /** Limit result set to items with specific terms assigned in the wp_pattern_category taxonomy. */
          wp_pattern_category?: string;
          /** Limit result set to items except those with specific terms assigned in the wp_pattern_category taxonomy. */
          wp_pattern_category_exclude?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
          /** The terms assigned to the post in the wp_pattern_category taxonomy. */
          wp_pattern_category?: number[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/blocks/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** The password for the post if it is password protected. */
          password?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
          /** The terms assigned to the post in the wp_pattern_category taxonomy. */
          wp_pattern_category?: number[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        formData: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
          /** The terms assigned to the post in the wp_pattern_category taxonomy. */
          wp_pattern_category?: number[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Whether to bypass Trash and force deletion. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
          /** The terms assigned to the post in the wp_pattern_category taxonomy. */
          wp_pattern_category?: number[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/blocks/{parent}/revisions": {
    get: {
      parameters: {
        path: {
          /** The ID for the parent of the revision. */
          parent: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by object attribute. */
          orderby?: (
            | "date"
            | "id"
            | "include"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
          )[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/blocks/{parent}": {
    get: {
      parameters: {
        path: {
          /** The ID for the parent of the autosave. */
          parent: number;
        };
        query: {
          /** The ID for the autosave. */
          id?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/blocks/{id}/autosaves": {
    get: {
      parameters: {
        query: {
          /** The ID for the parent of the autosave. */
          parent?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The ID for the parent of the autosave. */
          parent?: number;
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** Meta fields. */
          meta?: string;
          /** The theme file to use to display the post. */
          template?: string;
          /** The terms assigned to the post in the wp_pattern_category taxonomy. */
          wp_pattern_category?: number[];
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/templates/{parent}/revisions": {
    get: {
      parameters: {
        path: {
          /** The id of a template */
          parent: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by object attribute. */
          orderby?: (
            | "date"
            | "id"
            | "include"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
          )[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/templates/{parent}": {
    get: {
      parameters: {
        path: {
          /** The id of a template */
          parent: string;
        };
        query: {
          /** The ID for the autosave. */
          id?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/templates/{id}/autosaves": {
    get: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        formData: {
          /** Unique slug identifying the template. */
          slug?: string;
          /** Theme identifier for the template. */
          theme?: string;
          /** Type of template. */
          type?: string;
          /** Content of template. */
          content?: string;
          /** Title of template. */
          title?: string;
          /** Description of template. */
          description?: string;
          /** Status of template. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the author of the template. */
          author?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/templates": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Limit to the specified post id. */
          wp_id?: number;
          /** Limit to the specified template part area. */
          area?: string;
          /** Post type to get the templates for. */
          post_type?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** Unique slug identifying the template. */
          slug: string;
          /** Theme identifier for the template. */
          theme?: string;
          /** Type of template. */
          type?: string;
          /** Content of template. */
          content?: string;
          /** Title of template. */
          title?: string;
          /** Description of template. */
          description?: string;
          /** Status of template. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the author of the template. */
          author?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/templates/lookup": {
    get: {
      parameters: {
        query: {
          /** The slug of the template to get the fallback for */
          slug: string;
          /** Indicates if a template is custom or part of the template hierarchy */
          is_custom?: boolean;
          /** The template prefix for the created template. This is used to extract the main template type, e.g. in `taxonomy-books` extracts the `taxonomy` */
          template_prefix?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/templates/{id}": {
    get: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        query: {
          /** Unique slug identifying the template. */
          slug?: string;
          /** Theme identifier for the template. */
          theme?: string;
          /** Type of template. */
          type?: string;
          /** Content of template. */
          content?: string;
          /** Title of template. */
          title?: string;
          /** Description of template. */
          description?: string;
          /** Status of template. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the author of the template. */
          author?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        formData: {
          /** Unique slug identifying the template. */
          slug?: string;
          /** Theme identifier for the template. */
          theme?: string;
          /** Type of template. */
          type?: string;
          /** Content of template. */
          content?: string;
          /** Title of template. */
          title?: string;
          /** Description of template. */
          description?: string;
          /** Status of template. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the author of the template. */
          author?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        query: {
          /** Whether to bypass Trash and force deletion. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        query: {
          /** Unique slug identifying the template. */
          slug?: string;
          /** Theme identifier for the template. */
          theme?: string;
          /** Type of template. */
          type?: string;
          /** Content of template. */
          content?: string;
          /** Title of template. */
          title?: string;
          /** Description of template. */
          description?: string;
          /** Status of template. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the author of the template. */
          author?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/template-parts/{parent}/revisions": {
    get: {
      parameters: {
        path: {
          /** The id of a template */
          parent: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by object attribute. */
          orderby?: (
            | "date"
            | "id"
            | "include"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
          )[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/template-parts/{parent}": {
    get: {
      parameters: {
        path: {
          /** The id of a template */
          parent: string;
        };
        query: {
          /** The ID for the autosave. */
          id?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/template-parts/{id}/autosaves": {
    get: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        formData: {
          /** Unique slug identifying the template. */
          slug?: string;
          /** Theme identifier for the template. */
          theme?: string;
          /** Type of template. */
          type?: string;
          /** Content of template. */
          content?: string;
          /** Title of template. */
          title?: string;
          /** Description of template. */
          description?: string;
          /** Status of template. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the author of the template. */
          author?: number;
          /** Where the template part is intended for use (header, footer, etc.) */
          area?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/template-parts": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Limit to the specified post id. */
          wp_id?: number;
          /** Limit to the specified template part area. */
          area?: string;
          /** Post type to get the templates for. */
          post_type?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** Unique slug identifying the template. */
          slug: string;
          /** Theme identifier for the template. */
          theme?: string;
          /** Type of template. */
          type?: string;
          /** Content of template. */
          content?: string;
          /** Title of template. */
          title?: string;
          /** Description of template. */
          description?: string;
          /** Status of template. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the author of the template. */
          author?: number;
          /** Where the template part is intended for use (header, footer, etc.) */
          area?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/template-parts/lookup": {
    get: {
      parameters: {
        query: {
          /** The slug of the template to get the fallback for */
          slug: string;
          /** Indicates if a template is custom or part of the template hierarchy */
          is_custom?: boolean;
          /** The template prefix for the created template. This is used to extract the main template type, e.g. in `taxonomy-books` extracts the `taxonomy` */
          template_prefix?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/template-parts/{id}": {
    get: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        query: {
          /** Unique slug identifying the template. */
          slug?: string;
          /** Theme identifier for the template. */
          theme?: string;
          /** Type of template. */
          type?: string;
          /** Content of template. */
          content?: string;
          /** Title of template. */
          title?: string;
          /** Description of template. */
          description?: string;
          /** Status of template. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the author of the template. */
          author?: number;
          /** Where the template part is intended for use (header, footer, etc.) */
          area?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        formData: {
          /** Unique slug identifying the template. */
          slug?: string;
          /** Theme identifier for the template. */
          theme?: string;
          /** Type of template. */
          type?: string;
          /** Content of template. */
          content?: string;
          /** Title of template. */
          title?: string;
          /** Description of template. */
          description?: string;
          /** Status of template. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the author of the template. */
          author?: number;
          /** Where the template part is intended for use (header, footer, etc.) */
          area?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        query: {
          /** Whether to bypass Trash and force deletion. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
        query: {
          /** Unique slug identifying the template. */
          slug?: string;
          /** Theme identifier for the template. */
          theme?: string;
          /** Type of template. */
          type?: string;
          /** Content of template. */
          content?: string;
          /** Title of template. */
          title?: string;
          /** Description of template. */
          description?: string;
          /** Status of template. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** The ID for the author of the template. */
          author?: number;
          /** Where the template part is intended for use (header, footer, etc.) */
          area?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/navigation": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Limit response to posts published after a given ISO8601 compliant date. */
          after?: string;
          /** Limit response to posts modified after a given ISO8601 compliant date. */
          modified_after?: string;
          /** Limit response to posts published before a given ISO8601 compliant date. */
          before?: string;
          /** Limit response to posts modified before a given ISO8601 compliant date. */
          modified_before?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by post attribute. */
          orderby?: (
            | "author"
            | "date"
            | "id"
            | "include"
            | "modified"
            | "parent"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
          )[];
          /** Array of column names to be searched. */
          search_columns?: string[];
          /** Limit result set to posts with one or more specific slugs. */
          slug?: string[];
          /** Limit result set to posts assigned one or more statuses. */
          status?: string[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The theme file to use to display the post. */
          template?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/navigation/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** The password for the post if it is password protected. */
          password?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The theme file to use to display the post. */
          template?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        formData: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The theme file to use to display the post. */
          template?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** Whether to bypass Trash and force deletion. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the post. */
          id: number;
        };
        query: {
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The theme file to use to display the post. */
          template?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/navigation/{parent}/revisions": {
    get: {
      parameters: {
        path: {
          /** The ID for the parent of the revision. */
          parent: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by object attribute. */
          orderby?: (
            | "date"
            | "id"
            | "include"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
          )[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/navigation/{parent}": {
    get: {
      parameters: {
        path: {
          /** The ID for the parent of the autosave. */
          parent: number;
        };
        query: {
          /** The ID for the autosave. */
          id?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/navigation/{id}/autosaves": {
    get: {
      parameters: {
        query: {
          /** The ID for the parent of the autosave. */
          parent?: number;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The ID for the parent of the autosave. */
          parent?: number;
          /** The date the post was published, in the site's timezone. */
          date?: string;
          /** The date the post was published, as GMT. */
          date_gmt?: string;
          /** An alphanumeric identifier for the post unique to its type. */
          slug?: string;
          /** A named status for the post. */
          status?: ("publish" | "future" | "draft" | "pending" | "private")[];
          /** A password to protect access to the content and excerpt. */
          password?: string;
          /** The title for the post. */
          title?: string;
          /** The content for the post. */
          content?: string;
          /** The theme file to use to display the post. */
          template?: string;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/types": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/types/{type}": {
    get: {
      parameters: {
        path: {
          /** An alphanumeric identifier for the post type. */
          type: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/statuses": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/statuses/{status}": {
    get: {
      parameters: {
        path: {
          /** An alphanumeric identifier for the status. */
          status: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/taxonomies": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Limit results to taxonomies associated with a specific post type. */
          type?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/taxonomies/{taxonomy}": {
    get: {
      parameters: {
        path: {
          /** An alphanumeric identifier for the taxonomy. */
          taxonomy: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/categories": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by term attribute. */
          orderby?: (
            | "id"
            | "include"
            | "name"
            | "slug"
            | "include_slugs"
            | "term_group"
            | "description"
            | "count"
          )[];
          /** Whether to hide terms not assigned to any posts. */
          hide_empty?: boolean;
          /** Limit result set to terms assigned to a specific parent. */
          parent?: number;
          /** Limit result set to terms assigned to a specific post. */
          post?: number;
          /** Limit result set to terms with one or more specific slugs. */
          slug?: string[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** The parent term ID. */
          parent?: number;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/categories/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** The parent term ID. */
          parent?: number;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        formData: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** The parent term ID. */
          parent?: number;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** Required to be true, as terms do not support trashing. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** The parent term ID. */
          parent?: number;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/tags": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by term attribute. */
          orderby?: (
            | "id"
            | "include"
            | "name"
            | "slug"
            | "include_slugs"
            | "term_group"
            | "description"
            | "count"
          )[];
          /** Whether to hide terms not assigned to any posts. */
          hide_empty?: boolean;
          /** Limit result set to terms assigned to a specific post. */
          post?: number;
          /** Limit result set to terms with one or more specific slugs. */
          slug?: string[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/tags/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        formData: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** Required to be true, as terms do not support trashing. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/menus": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by term attribute. */
          orderby?: (
            | "id"
            | "include"
            | "name"
            | "slug"
            | "include_slugs"
            | "term_group"
            | "description"
            | "count"
          )[];
          /** Whether to hide terms not assigned to any posts. */
          hide_empty?: boolean;
          /** Limit result set to terms assigned to a specific post. */
          post?: number;
          /** Limit result set to terms with one or more specific slugs. */
          slug?: string[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
          /** The locations assigned to the menu. */
          locations?: string[];
          /** Whether to automatically add top level pages to this menu. */
          auto_add?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/menus/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
          /** The locations assigned to the menu. */
          locations?: string[];
          /** Whether to automatically add top level pages to this menu. */
          auto_add?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        formData: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
          /** The locations assigned to the menu. */
          locations?: string[];
          /** Whether to automatically add top level pages to this menu. */
          auto_add?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** Required to be true, as terms do not support trashing. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
          /** The locations assigned to the menu. */
          locations?: string[];
          /** Whether to automatically add top level pages to this menu. */
          auto_add?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/wp_pattern_category": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by term attribute. */
          orderby?: (
            | "id"
            | "include"
            | "name"
            | "slug"
            | "include_slugs"
            | "term_group"
            | "description"
            | "count"
          )[];
          /** Whether to hide terms not assigned to any posts. */
          hide_empty?: boolean;
          /** Limit result set to terms assigned to a specific post. */
          post?: number;
          /** Limit result set to terms with one or more specific slugs. */
          slug?: string[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/wp_pattern_category/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        formData: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** Required to be true, as terms do not support trashing. */
          force?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the term. */
          id: number;
        };
        query: {
          /** HTML description of the term. */
          description?: string;
          /** HTML title for the term. */
          name?: string;
          /** An alphanumeric identifier for the term unique to its type. */
          slug?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/users": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by user attribute. */
          orderby?: (
            | "id"
            | "include"
            | "name"
            | "registered_date"
            | "slug"
            | "include_slugs"
            | "email"
            | "url"
          )[];
          /** Limit result set to users with one or more specific slugs. */
          slug?: string[];
          /** Limit result set to users matching at least one specific role provided. Accepts csv list or single role. */
          roles?: string[];
          /** Limit result set to users matching at least one specific capability provided. Accepts csv list or single capability. */
          capabilities?: string[];
          /** Limit result set to users who are considered authors. */
          who?: "authors"[];
          /** Limit result set to users who have published posts. */
          has_published_posts?: boolean;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** Login name for the user. */
          username: string;
          /** Display name for the user. */
          name?: string;
          /** First name for the user. */
          first_name?: string;
          /** Last name for the user. */
          last_name?: string;
          /** The email address for the user. */
          email: string;
          /** URL of the user. */
          url?: string;
          /** Description of the user. */
          description?: string;
          /** Locale for the user. */
          locale?: ("" | "en_US")[];
          /** The nickname for the user. */
          nickname?: string;
          /** An alphanumeric identifier for the user. */
          slug?: string;
          /** Roles assigned to the user. */
          roles?: string[];
          /** Password for the user (never included). */
          password: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/users/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the user. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the user. */
          id: number;
        };
        query: {
          /** Login name for the user. */
          username?: string;
          /** Display name for the user. */
          name?: string;
          /** First name for the user. */
          first_name?: string;
          /** Last name for the user. */
          last_name?: string;
          /** The email address for the user. */
          email?: string;
          /** URL of the user. */
          url?: string;
          /** Description of the user. */
          description?: string;
          /** Locale for the user. */
          locale?: ("" | "en_US")[];
          /** The nickname for the user. */
          nickname?: string;
          /** An alphanumeric identifier for the user. */
          slug?: string;
          /** Roles assigned to the user. */
          roles?: string[];
          /** Password for the user (never included). */
          password?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the user. */
          id: number;
        };
        formData: {
          /** Login name for the user. */
          username?: string;
          /** Display name for the user. */
          name?: string;
          /** First name for the user. */
          first_name?: string;
          /** Last name for the user. */
          last_name?: string;
          /** The email address for the user. */
          email?: string;
          /** URL of the user. */
          url?: string;
          /** Description of the user. */
          description?: string;
          /** Locale for the user. */
          locale?: ("" | "en_US")[];
          /** The nickname for the user. */
          nickname?: string;
          /** An alphanumeric identifier for the user. */
          slug?: string;
          /** Roles assigned to the user. */
          roles?: string[];
          /** Password for the user (never included). */
          password?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the user. */
          id: number;
        };
        query: {
          /** Required to be true, as users do not support trashing. */
          force?: boolean;
          /** Reassign the deleted user's posts and links to this user ID. */
          reassign: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the user. */
          id: number;
        };
        query: {
          /** Login name for the user. */
          username?: string;
          /** Display name for the user. */
          name?: string;
          /** First name for the user. */
          first_name?: string;
          /** Last name for the user. */
          last_name?: string;
          /** The email address for the user. */
          email?: string;
          /** URL of the user. */
          url?: string;
          /** Description of the user. */
          description?: string;
          /** Locale for the user. */
          locale?: ("" | "en_US")[];
          /** The nickname for the user. */
          nickname?: string;
          /** An alphanumeric identifier for the user. */
          slug?: string;
          /** Roles assigned to the user. */
          roles?: string[];
          /** Password for the user (never included). */
          password?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/users/me": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        query: {
          /** Login name for the user. */
          username?: string;
          /** Display name for the user. */
          name?: string;
          /** First name for the user. */
          first_name?: string;
          /** Last name for the user. */
          last_name?: string;
          /** The email address for the user. */
          email?: string;
          /** URL of the user. */
          url?: string;
          /** Description of the user. */
          description?: string;
          /** Locale for the user. */
          locale?: ("" | "en_US")[];
          /** The nickname for the user. */
          nickname?: string;
          /** An alphanumeric identifier for the user. */
          slug?: string;
          /** Roles assigned to the user. */
          roles?: string[];
          /** Password for the user (never included). */
          password?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** Login name for the user. */
          username?: string;
          /** Display name for the user. */
          name?: string;
          /** First name for the user. */
          first_name?: string;
          /** Last name for the user. */
          last_name?: string;
          /** The email address for the user. */
          email?: string;
          /** URL of the user. */
          url?: string;
          /** Description of the user. */
          description?: string;
          /** Locale for the user. */
          locale?: ("" | "en_US")[];
          /** The nickname for the user. */
          nickname?: string;
          /** An alphanumeric identifier for the user. */
          slug?: string;
          /** Roles assigned to the user. */
          roles?: string[];
          /** Password for the user (never included). */
          password?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** Required to be true, as users do not support trashing. */
          force?: boolean;
          /** Reassign the deleted user's posts and links to this user ID. */
          reassign: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Login name for the user. */
          username?: string;
          /** Display name for the user. */
          name?: string;
          /** First name for the user. */
          first_name?: string;
          /** Last name for the user. */
          last_name?: string;
          /** The email address for the user. */
          email?: string;
          /** URL of the user. */
          url?: string;
          /** Description of the user. */
          description?: string;
          /** Locale for the user. */
          locale?: ("" | "en_US")[];
          /** The nickname for the user. */
          nickname?: string;
          /** An alphanumeric identifier for the user. */
          slug?: string;
          /** Roles assigned to the user. */
          roles?: string[];
          /** Password for the user (never included). */
          password?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/users/{user_id}/application-passwords": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          user_id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace. */
          app_id?: string;
          /** The name of the application password. */
          name: string;
        };
        path: {
          user_id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          user_id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/users/{user_id}/application-passwords/introspect": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          user_id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/users/{user_id}": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          user_id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        query: {
          /** A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace. */
          app_id?: string;
          /** The name of the application password. */
          name?: string;
        };
        path: {
          user_id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace. */
          app_id?: string;
          /** The name of the application password. */
          name?: string;
        };
        path: {
          user_id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          user_id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        query: {
          /** A UUID provided by the application to uniquely identify it. It is recommended to use an UUID v5 with the URL or DNS namespace. */
          app_id?: string;
          /** The name of the application password. */
          name?: string;
        };
        path: {
          user_id: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/comments": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Limit response to comments published after a given ISO8601 compliant date. */
          after?: string;
          /** Limit result set to comments assigned to specific user IDs. Requires authorization. */
          author?: number[];
          /** Ensure result set excludes comments assigned to specific user IDs. Requires authorization. */
          author_exclude?: number[];
          /** Limit result set to that from a specific author email. Requires authorization. */
          author_email?: string;
          /** Limit response to comments published before a given ISO8601 compliant date. */
          before?: string;
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by comment attribute. */
          orderby?: (
            | "date"
            | "date_gmt"
            | "id"
            | "include"
            | "post"
            | "parent"
            | "type"
          )[];
          /** Limit result set to comments of specific parent IDs. */
          parent?: number[];
          /** Ensure result set excludes specific parent IDs. */
          parent_exclude?: number[];
          /** Limit result set to comments assigned to specific post IDs. */
          post?: number[];
          /** Limit result set to comments assigned a specific status. Requires authorization. */
          status?: string;
          /** Limit result set to comments assigned a specific type. Requires authorization. */
          type?: string;
          /** The password for the post if it is password protected. */
          password?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** The ID of the user object, if author was a user. */
          author?: number;
          /** Email address for the comment author. */
          author_email?: string;
          /** IP address for the comment author. */
          author_ip?: string;
          /** Display name for the comment author. */
          author_name?: string;
          /** URL for the comment author. */
          author_url?: string;
          /** User agent for the comment author. */
          author_user_agent?: string;
          /** The content for the comment. */
          content?: string;
          /** The date the comment was published, in the site's timezone. */
          date?: string;
          /** The date the comment was published, as GMT. */
          date_gmt?: string;
          /** The ID for the parent of the comment. */
          parent?: number;
          /** The ID of the associated post object. */
          post?: number;
          /** State of the comment. */
          status?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/comments/{id}": {
    get: {
      parameters: {
        path: {
          /** Unique identifier for the comment. */
          id: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** The password for the parent post of the comment (if the post is password protected). */
          password?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the comment. */
          id: number;
        };
        query: {
          /** The ID of the user object, if author was a user. */
          author?: number;
          /** Email address for the comment author. */
          author_email?: string;
          /** IP address for the comment author. */
          author_ip?: string;
          /** Display name for the comment author. */
          author_name?: string;
          /** URL for the comment author. */
          author_url?: string;
          /** User agent for the comment author. */
          author_user_agent?: string;
          /** The content for the comment. */
          content?: string;
          /** The date the comment was published, in the site's timezone. */
          date?: string;
          /** The date the comment was published, as GMT. */
          date_gmt?: string;
          /** The ID for the parent of the comment. */
          parent?: number;
          /** The ID of the associated post object. */
          post?: number;
          /** State of the comment. */
          status?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the comment. */
          id: number;
        };
        formData: {
          /** The ID of the user object, if author was a user. */
          author?: number;
          /** Email address for the comment author. */
          author_email?: string;
          /** IP address for the comment author. */
          author_ip?: string;
          /** Display name for the comment author. */
          author_name?: string;
          /** URL for the comment author. */
          author_url?: string;
          /** User agent for the comment author. */
          author_user_agent?: string;
          /** The content for the comment. */
          content?: string;
          /** The date the comment was published, in the site's timezone. */
          date?: string;
          /** The date the comment was published, as GMT. */
          date_gmt?: string;
          /** The ID for the parent of the comment. */
          parent?: number;
          /** The ID of the associated post object. */
          post?: number;
          /** State of the comment. */
          status?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** Unique identifier for the comment. */
          id: number;
        };
        query: {
          /** Whether to bypass Trash and force deletion. */
          force?: boolean;
          /** The password for the parent post of the comment (if the post is password protected). */
          password?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the comment. */
          id: number;
        };
        query: {
          /** The ID of the user object, if author was a user. */
          author?: number;
          /** Email address for the comment author. */
          author_email?: string;
          /** IP address for the comment author. */
          author_ip?: string;
          /** Display name for the comment author. */
          author_name?: string;
          /** URL for the comment author. */
          author_url?: string;
          /** User agent for the comment author. */
          author_user_agent?: string;
          /** The content for the comment. */
          content?: string;
          /** The date the comment was published, in the site's timezone. */
          date?: string;
          /** The date the comment was published, as GMT. */
          date_gmt?: string;
          /** The ID for the parent of the comment. */
          parent?: number;
          /** The ID of the associated post object. */
          post?: number;
          /** State of the comment. */
          status?: string;
          /** Meta fields. */
          meta?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/search": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Limit results to items of an object type. */
          type?: ("post" | "term" | "post-format")[];
          /** Limit results to items of one or more object subtypes. */
          subtype?: string[];
          /** Ensure result set excludes specific IDs. */
          exclude?: number[];
          /** Limit result set to specific IDs. */
          include?: number[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/block-renderer/{name}": {
    get: {
      parameters: {
        path: {
          /** Unique registered name for the block. */
          name: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: "edit"[];
          /** Attributes for the block. */
          attributes?: string;
          /** ID of the post context. */
          post_id?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique registered name for the block. */
          name: string;
        };
        formData: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: "edit"[];
          /** Attributes for the block. */
          attributes?: string;
          /** ID of the post context. */
          post_id?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/block-types": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Block namespace. */
          namespace?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/block-types/{namespace}": {
    get: {
      parameters: {
        query: {
          /** Block name. */
          name?: string;
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          /** Block namespace. */
          namespace: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/global-styles/{parent}/revisions": {
    get: {
      parameters: {
        path: {
          /** The ID for the parent of the revision. */
          parent: number;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Offset the result set by a specific number of items. */
          offset?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/global-styles/themes/{stylesheet}/variations": {
    get: {
      parameters: {
        path: {
          /** The theme identifier */
          stylesheet: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/global-styles/themes/{stylesheet}": {
    get: {
      parameters: {
        path: {
          /** The theme identifier */
          stylesheet: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/global-styles/{id}": {
    get: {
      parameters: {
        path: {
          /** The id of a template */
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        query: {
          /** Global styles. */
          styles?: string;
          /** Global settings. */
          settings?: string;
          /** Title of the global styles variation. */
          title?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** Global styles. */
          styles?: string;
          /** Global settings. */
          settings?: string;
          /** Title of the global styles variation. */
          title?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Global styles. */
          styles?: string;
          /** Global settings. */
          settings?: string;
          /** Title of the global styles variation. */
          title?: string;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/settings": {
    get: {
      parameters: {};
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        query: {
          /** Site title. */
          title?: string;
          /** Site tagline. */
          description?: string;
          /** Site URL. */
          url?: string;
          /** This address is used for admin purposes, like new user notification. */
          email?: string;
          /** A city in the same timezone as you. */
          timezone?: string;
          /** A date format for all date strings. */
          date_format?: string;
          /** A time format for all time strings. */
          time_format?: string;
          /** A day number of the week that the week should start on. */
          start_of_week?: number;
          /** WordPress locale code. */
          language?: string;
          /** Convert emoticons like :-) and :-P to graphics on display. */
          use_smilies?: boolean;
          /** Default post category. */
          default_category?: number;
          /** Default post format. */
          default_post_format?: string;
          /** Blog pages show at most. */
          posts_per_page?: number;
          /** What to show on the front page */
          show_on_front?: string;
          /** The ID of the page that should be displayed on the front page */
          page_on_front?: number;
          /** The ID of the page that should display the latest posts */
          page_for_posts?: number;
          /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
          default_ping_status?: ("open" | "closed")[];
          /** Allow people to submit comments on new posts. */
          default_comment_status?: ("open" | "closed")[];
          /** Site logo. */
          site_logo?: number;
          /** Site icon. */
          site_icon?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** Site title. */
          title?: string;
          /** Site tagline. */
          description?: string;
          /** Site URL. */
          url?: string;
          /** This address is used for admin purposes, like new user notification. */
          email?: string;
          /** A city in the same timezone as you. */
          timezone?: string;
          /** A date format for all date strings. */
          date_format?: string;
          /** A time format for all time strings. */
          time_format?: string;
          /** A day number of the week that the week should start on. */
          start_of_week?: number;
          /** WordPress locale code. */
          language?: string;
          /** Convert emoticons like :-) and :-P to graphics on display. */
          use_smilies?: boolean;
          /** Default post category. */
          default_category?: number;
          /** Default post format. */
          default_post_format?: string;
          /** Blog pages show at most. */
          posts_per_page?: number;
          /** What to show on the front page */
          show_on_front?: string;
          /** The ID of the page that should be displayed on the front page */
          page_on_front?: number;
          /** The ID of the page that should display the latest posts */
          page_for_posts?: number;
          /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
          default_ping_status?: ("open" | "closed")[];
          /** Allow people to submit comments on new posts. */
          default_comment_status?: ("open" | "closed")[];
          /** Site logo. */
          site_logo?: number;
          /** Site icon. */
          site_icon?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Site title. */
          title?: string;
          /** Site tagline. */
          description?: string;
          /** Site URL. */
          url?: string;
          /** This address is used for admin purposes, like new user notification. */
          email?: string;
          /** A city in the same timezone as you. */
          timezone?: string;
          /** A date format for all date strings. */
          date_format?: string;
          /** A time format for all time strings. */
          time_format?: string;
          /** A day number of the week that the week should start on. */
          start_of_week?: number;
          /** WordPress locale code. */
          language?: string;
          /** Convert emoticons like :-) and :-P to graphics on display. */
          use_smilies?: boolean;
          /** Default post category. */
          default_category?: number;
          /** Default post format. */
          default_post_format?: string;
          /** Blog pages show at most. */
          posts_per_page?: number;
          /** What to show on the front page */
          show_on_front?: string;
          /** The ID of the page that should be displayed on the front page */
          page_on_front?: number;
          /** The ID of the page that should display the latest posts */
          page_for_posts?: number;
          /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
          default_ping_status?: ("open" | "closed")[];
          /** Allow people to submit comments on new posts. */
          default_comment_status?: ("open" | "closed")[];
          /** Site logo. */
          site_logo?: number;
          /** Site icon. */
          site_icon?: number;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/themes": {
    get: {
      parameters: {
        query: {
          /** Limit result set to themes assigned one or more statuses. */
          status?: string[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/themes/{stylesheet}": {
    get: {
      parameters: {
        path: {
          /** The theme's stylesheet. This uniquely identifies the theme. */
          stylesheet: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/plugins": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Limit results to those matching a string. */
          search?: string;
          /** Limits results to plugins with the given status. */
          status?: string[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** WordPress.org plugin directory slug. */
          slug: string;
          /** The plugin activation status. */
          status?: ("inactive" | "active")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/plugins/{plugin}": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          plugin: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** The plugin activation status. */
          status?: ("inactive" | "active")[];
        };
        path: {
          plugin: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** The plugin activation status. */
          status?: ("inactive" | "active")[];
        };
        path: {
          plugin: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          plugin: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** The plugin activation status. */
          status?: ("inactive" | "active")[];
        };
        path: {
          plugin: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/sidebars": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/sidebars/{id}": {
    get: {
      parameters: {
        path: {
          /** The id of a registered sidebar */
          id: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        query: {
          /** Nested widgets. */
          widgets?: unknown[];
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** Nested widgets. */
          widgets?: unknown[];
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Nested widgets. */
          widgets?: unknown[];
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/widget-types": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/widget-types/{id}": {
    get: {
      parameters: {
        path: {
          /** The widget type id. */
          id: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/widget-types/{id}/encode": {
    post: {
      parameters: {
        path: {
          /** The widget type id. */
          id: string;
        };
        formData: {
          /** Current instance settings of the widget. */
          instance?: string;
          /** Serialized widget form data to encode into instance settings. */
          form_data?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/widget-types/{id}/render": {
    post: {
      parameters: {
        path: {
          /** The widget type id. */
          id: string;
        };
        formData: {
          /** Current instance settings of the widget. */
          instance?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/widgets": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** The sidebar to return widgets for. */
          sidebar?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        formData: {
          /** Unique identifier for the widget. */
          id?: string;
          /** The type of the widget. Corresponds to ID in widget-types endpoint. */
          id_base?: string;
          /** The sidebar the widget belongs to. */
          sidebar: string;
          /** Instance settings of the widget, if supported. */
          instance?: string;
          /** URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only. */
          form_data?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/widgets/{id}": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** Unique identifier for the widget. */
          id: string;
        };
        query: {
          /** The type of the widget. Corresponds to ID in widget-types endpoint. */
          id_base?: string;
          /** The sidebar the widget belongs to. */
          sidebar?: string;
          /** Instance settings of the widget, if supported. */
          instance?: string;
          /** URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only. */
          form_data?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** Unique identifier for the widget. */
          id: string;
        };
        formData: {
          /** The type of the widget. Corresponds to ID in widget-types endpoint. */
          id_base?: string;
          /** The sidebar the widget belongs to. */
          sidebar?: string;
          /** Instance settings of the widget, if supported. */
          instance?: string;
          /** URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only. */
          form_data?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** Whether to force removal of the widget, or move it to the inactive sidebar. */
          force?: boolean;
        };
        path: {
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          /** Unique identifier for the widget. */
          id: string;
        };
        query: {
          /** The type of the widget. Corresponds to ID in widget-types endpoint. */
          id_base?: string;
          /** The sidebar the widget belongs to. */
          sidebar?: string;
          /** Instance settings of the widget, if supported. */
          instance?: string;
          /** URL-encoded form data from the widget admin form. Used to update a widget that does not support instance. Write only. */
          form_data?: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/block-directory/search": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: "view"[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit result set to blocks matching the search term. */
          term: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/pattern-directory/patterns": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
          /** Current page of the collection. */
          page?: number;
          /** Maximum number of items to be returned in result set. */
          per_page?: number;
          /** Limit results to those matching a string. */
          search?: string;
          /** Limit results to those matching a category ID. */
          category?: number;
          /** Limit results to those matching a keyword ID. */
          keyword?: number;
          /** Limit results to those matching a pattern (slug). */
          slug?: unknown[];
          /** Offset the result set by a specific number of items. */
          offset?: number;
          /** Order sort attribute ascending or descending. */
          order?: ("asc" | "desc")[];
          /** Sort collection by post attribute. */
          orderby?: (
            | "author"
            | "date"
            | "id"
            | "include"
            | "modified"
            | "parent"
            | "relevance"
            | "slug"
            | "include_slugs"
            | "title"
            | "favorite_count"
          )[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/block-patterns/patterns": {
    get: {
      parameters: {};
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/block-patterns/categories": {
    get: {
      parameters: {};
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/menu-locations": {
    get: {
      parameters: {
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
  "/wp/v2/menu-locations/{location}": {
    get: {
      parameters: {
        path: {
          /** An alphanumeric identifier for the menu location. */
          location: string;
        };
        query: {
          /** Scope under which the request is made; determines fields present in response. */
          context?: ("view" | "embed" | "edit")[];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: unknown;
        /** Not Found */
        404: unknown;
      };
    };
  };
}

export interface operations {}

export interface external {}
